package org.ssh.ipc.peripheral;

import java.util.*;
import org.reactivestreams.Publisher;
import org.ssh.game.Agent;
import org.ssh.game.engine.Engine;
import org.ssh.io.ControllerAware;
import reactor.core.publisher.Flux;

/**
 * The Class ControllerEngine.
 *
 * @param <A> The type of {@link Agent} which is being controlled by this engine.
 * @param <C> The type of controller identifier
 * @param <O> The type of {@link Strategy} which is generated by this engine.
 * @author Rimon Oz
 */
public interface ControllerEngine<C extends Controller, A extends Agent, I extends ControllerAware<C, A>, O>
    extends Engine<I, O> {

  @Override
  default Publisher<O> transform(
      final Publisher<I> controllerPublisher
  ) {
    return Flux.from(controllerPublisher)
        .flatMapIterable(controllerAware -> controllerAware.getAgentMapping().entrySet())
        .filter(controller -> this.getControllerMapping().containsKey(controller.getKey()))
        .map(controller -> this.getControllerMapping().get(controller.getKey())
            .apply(controller.getKey()));
  }

  Map<C, ControllerHandler<C, O>> getControllerMapping();
}

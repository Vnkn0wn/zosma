package org.ssh.ipc.peripheral;

import com.google.common.collect.ImmutableSet;
import com.studiohartman.jamepad.ControllerManager;
import com.studiohartman.jamepad.ControllerState;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;
import org.ssh.game.Agent;
import org.ssh.game.Command;
import org.ssh.game.Strategy;
import org.ssh.game.engine.MapEngine;
import org.ssh.game.engine.Turk;
import reactor.core.publisher.Flux;
import reactor.core.scheduler.Schedulers;

/**
 * The Class ControllerTurk.
 *
 * @param <A> The type of {@link Agent} which is being controlled by this engine.
 * @param <S> The type of {@link Strategy} which is generated by this engine.
 * @author Rimon Oz
 */
@Slf4j
public abstract class ControllerTurk<
    A extends Agent,
    S extends Strategy> implements Turk<S, Integer>, MapEngine<Set<A>, S, Integer>  {

  /**
   * The Controllers.
   */
  protected final ControllerManager controllers;

  @Getter
  private final Subscriber<S> strategySubscriber;

  /**
   * The publisher on which controller states are being published.
   */
  @Getter
  private final Publisher<Map<Integer, ControllerState>> controllerStatePublisher;

  /**
   * Instantiates a new ControllerTurk.
   * @param strategySubscriber The {@link Subscriber} which parses the {@link Strategy strategies}.
   * @param controllerCount    The number of controllers.
   */
  public ControllerTurk(Subscriber<S> strategySubscriber, int controllerCount) {
    this.strategySubscriber = strategySubscriber;
    this.controllers = new ControllerManager(controllerCount);
    this.controllers.initSDLGamepad();
    this.controllerStatePublisher = Flux.create(fluxSink -> {
      while (true) {
        fluxSink.next(IntStream.range(0, controllerCount)
            .boxed()
            .filter(controllerIndex -> this.controllers.getControllerIndex(controllerIndex)
                .isConnected())
            .collect(Collectors.toMap(
                Function.identity(),
                controllers::getState)));
      }
    });
  }

  /**
   * Returns a set of players which are controlled by this engine.
   *
   * @return the controlled players
   */
  public abstract Set<A> getControllableAgents();

  /**
   * Assigns the supplied handler to the supplied {@link Agent}.
   *
   * @param handler The handler to link to a {@link Agent}.
   * @param agent   The {@link Agent} to link the handler to.
   * @return set set
   */
  public Set<A> assignHandler(Integer handler, A agent) {
    log.info("Assigning handler '" + handler + "' to "
        + agent.getClass().getTypeName() + " " + agent.getId());
    return this.getPartsMap().put(handler, ImmutableSet.<A>builder()
        .addAll(Collections.singleton(agent))
        .addAll(this.getPartsMap().getOrDefault(handler, Collections.emptySet())).build());
  }

  /**
   * Unassigns a handler from the specified {@link Agent}.
   *
   * @param handler The handler to unassign from the {@link Agent}.
   * @param agent   The {@link Agent} to unassign the handler from.
   * @return set set
   */
  public Set<A> unassignHandler(Integer handler, A agent) {
    log.info("Unassigning handler '" + handler + "' from "
        + agent.getClass().getTypeName() + " " + agent.getId());
    if (this.getPartsMap().containsKey(handler)) {
      if (this.getPartsMap().get(handler).contains(agent)) {
        return this.getPartsMap().put(
            handler,
            this.getPartsMap().get(handler).stream()
                .filter(registeredAgent -> !registeredAgent.equals(agent))
                .collect(Collectors.toSet()));
      }
    }
    return Collections.emptySet();
  }

  /**
   * Creates a {@link Strategy} from the specified command for the specified agent.
   *
   * @param agent   The {@link Agent} to create a strategy for.
   * @param command The {@link Command} to create the strategy from.
   * @return A strategy for the supplied {@link Agent} created from the supplied {@link Command}
   */
  public abstract S createStrategy(final A agent, final ControllerState command);

  @Override
  public void play() {
    Flux.from(this.getControllerStatePublisher())
        .subscribeOn(Schedulers.single())
        .map(mapping -> mapping.entrySet().stream()
            .filter(entry -> this.getPartsMap().containsKey(entry.getKey()))
            .flatMap(entry -> this.getPartsMap().get(entry.getKey()).stream()
                .collect(Collectors.toMap(a -> a, a -> entry))
                .entrySet().stream())
            .collect(Collectors.toMap(
                entry -> entry.getValue().getKey(),
                entry -> this.createStrategy(entry.getKey(), entry.getValue().getValue()))))
        .map(this::arbitrate)
        .subscribe(this.getStrategySubscriber());
  }
}
